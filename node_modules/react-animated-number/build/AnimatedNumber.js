'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ANIMATION_DURATION = 300;

var AnimatedNumber = function (_Component) {
    _inherits(AnimatedNumber, _Component);

    function AnimatedNumber() {
        _classCallCheck(this, AnimatedNumber);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AnimatedNumber).call(this));

        _this.state = {
            currentValue: 0,
            frame: 0
        };
        return _this;
    }

    _createClass(AnimatedNumber, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.prepareTween(this.props);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {

            if (+this.state.currentValue === +nextProps.value) {
                return;
            }

            if (this.tweenInterval) {
                this.endTween();
            }

            this.prepareTween(nextProps);
        }
    }, {
        key: 'prepareTween',
        value: function prepareTween(_ref) {
            var _this2 = this;

            var value = _ref.value;
            var duration = _ref.duration;
            var frameDuration = _ref.frameDuration;
            var currentValue = this.state.currentValue;


            this.totalFrames = Math.ceil(duration / frameDuration) + 1;
            this.tweenStep = (value - currentValue) / this.totalFrames;

            this.tweenInterval = setInterval(function () {
                return _this2.tweenValue(1);
            }, 16);
        }
    }, {
        key: 'endTween',
        value: function endTween() {
            clearInterval(this.tweenInterval);
            this.setState({
                currValue: this.props.value,
                frame: 0
            });
        }
    }, {
        key: 'tweenValue',
        value: function tweenValue() {
            var value = this.props.value;
            var _state = this.state;
            var _state$frame = _state.frame;
            var frame = _state$frame === undefined ? 0 : _state$frame;
            var _state$currentValue = _state.currentValue;
            var currentValue = _state$currentValue === undefined ? 0 : _state$currentValue;


            currentValue = +currentValue;

            if (currentValue === value) {
                this.endTween();
                return;
            }

            currentValue = currentValue + this.tweenStep;

            if (this.tweenStep < 0) {
                currentValue = Math.max(value, currentValue);
            } else if (this.tweenStep > 0) {
                currentValue = Math.min(value, currentValue);
            }

            frame = frame + 1;

            if (currentValue === value) {
                frame = this.totalFrames;
                this.endTween();
            }

            this.setState({ currentValue: currentValue, frame: frame });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props;
            var format = _props.format;
            var value = _props.value;
            var frameStyle = _props.frameStyle;
            var stepPrecision = _props.stepPrecision;
            var _state2 = this.state;
            var frame = _state2.frame;
            var currentValue = _state2.currentValue;
            var style = this.props.style;

            var adjustedValue = currentValue;

            if (currentValue !== value) {
                if (stepPrecision > 0) {
                    adjustedValue = currentValue.toFixed(stepPrecision);
                } else if (this.tweenStep < 0 && stepPrecision === 0) {
                    adjustedValue = Math.floor(currentValue);
                } else if (this.tweenStep > 0 && stepPrecision === 0) {
                    adjustedValue = Math.ceil(currentValue);
                }
            }

            adjustedValue = +adjustedValue;

            var currStyle = frameStyle(frame / this.totalFrames * 100);

            if (style && currStyle) {
                style = _extends({}, style, currStyle);
            } else if (currStyle) {
                style = currStyle;
            }

            return _react2.default.createElement(this.props.component, _extends({}, this.props, { style: style }), format(adjustedValue));
        }
    }]);

    return AnimatedNumber;
}(_react.Component);

AnimatedNumber.propTypes = {
    component: _react.PropTypes.any,
    format: _react.PropTypes.func,
    value: _react.PropTypes.number.isRequired,
    duration: _react.PropTypes.number,
    frameDuration: _react.PropTypes.number,
    frameStyle: _react.PropTypes.func,
    stepPrecision: _react.PropTypes.number,
    style: _react.PropTypes.object
};
AnimatedNumber.defaultProps = {
    component: 'span',
    format: function format(n) {
        return n;
    },
    duration: ANIMATION_DURATION,
    frameDuration: 16,
    frameStyle: function frameStyle() {
        return {};
    }
};
exports.default = AnimatedNumber;